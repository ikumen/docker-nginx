#!/bin/bash

source ./helpers
source .secrets

# Grab the directory where this script is located and use that as working directory.
# https://stackoverflow.com/a/246128
BASE_WORKDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Make sure we're in the correct directory, then load some helper functions
cd $BASE_WORKDIR

# Create a Docker network (base on hostname)
export NETWORK="$(hostname)"
/usr/bin/docker network inspect $NETWORK > /dev/null 2>&1 || \
  /usr/bin/docker network create --attachable --driver bridge $NETWORK

install_service () {
  cd "$BASE_WORKDIR/$1"
  if [ -f "install.sh" ]; then
    echo "Installing service at: $BASE_WORKDIR/$1"
    echo "$(. install.sh)"
  else
    echo "Nothing to install for $BASE_WORKDIR/$1"
  fi
  cd "$BASE_WORKDIR"
}

uninstall_service () {
  SERVICE="$(get_dc_service_name ${1}/docker-compose.yml)"
  CONTAINER_NAME="$(get_dc_container_name ${1}/docker-compose.yml)"
  IMAGE_NAME="$(get_dc_image_name ${1}/docker-compose.yml)"

  if [[ -z "$SERVICE" || -z "$CONTAINER_NAME" || -z "$IMAGE_NAME" ]]; then
    echo "docker-compose invalid: service=$SERVICE, container=$CONTAINER_NAME, image=$IMAGE_NAME"
    exit 1
  fi

  systemctl stop $SERVICE
  systemctl disable $SERVICE
  rm "/etc/systemd/system/$SERVICE.service"
  systemctl daemon-reload
  systemctl reset-failed

  docker stop $CONTAINER_NAME
  docker rm $CONTAINER_NAME
  docker rmi -f $IMAGE_NAME

  unset SERVICE
  unset CONTAINER_NAME
  unset IMAGE_NAME
}

install_all_services () {
  cd "$BASE_WORKDIR"
  for f in *; do
    if [ -d "$f" ]; then
      install_service $f  
    fi
  done
}

show_status () {
  cd "$BASE_WORKDIR"
  for f in *; do
    if [ -f "$BASE_WORKDIR/$f/install.sh" ]; then
      echo ""
      systemctl status --lines 0 $f
    fi
  done
  echo ""
}

case "$1" in
  '-i')
    if [ -z "$2" ]; then
      install_all_services
    else
      install_service $2
    fi
  ;;
  '-u')
    if [ -z "$2" ]; then
      echo "Usage: service -u <service name>"
    else
      uninstall_service $2
    fi
  ;;
  '-s')
    show_status
  ;;
  '*')
    exit 1
esac
  

